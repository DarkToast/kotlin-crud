plugins {
    id "org.jetbrains.kotlin.jvm" version '1.7.0'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.10'
    id "org.jlleitschuh.gradle.ktlint" version "11.0.0"
    id 'application'
}

def ktor_version = '2.2.1'
def koin_version = '3.3.0'
def exposed_version = '0.40.1'

repositories {
    mavenCentral()
}

application {
    mainClass = 'de.tarent.crud.ApplicationKt'
}

dependencies {
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-server-status-pages:$ktor_version"
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"

    implementation "io.insert-koin:koin-core:$koin_version"
    implementation "io.insert-koin:koin-ktor:$koin_version"
    implementation "io.insert-koin:koin-logger-slf4j:$koin_version"

    implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-dao:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-java-time:$exposed_version"

    implementation 'ch.qos.logback:logback-classic:1.4.5'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.4'
    implementation 'com.zaxxer:HikariCP:5.0.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'

    runtimeOnly 'org.postgresql:postgresql:42.5.1'

    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.9.1"
    testImplementation "org.assertj:assertj-core:3.23.1"
    testImplementation "io.ktor:ktor-server-test-host:$ktor_version"
    testImplementation("io.insert-koin:koin-test:$koin_version") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-test-junit"
    }

    testRuntimeOnly 'com.h2database:h2:2.1.214'
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat "full"
}

tasks.register("prepareImage", Copy) {
    from "$buildDir/resources/main/Dockerfile"
    into "$buildDir/install"
}