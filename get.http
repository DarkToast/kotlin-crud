### INDEX PAGE
GET localhost:8080/

### CREATE THE HWR GROUP
POST localhost:8080/groups
Content-Type: application/json

{
  "name": "HWR",
  "description": "Hauswirtschaftsraum"
}

### GET A LIST OF GROUPS
GET localhost:8080/groups

### CREATE DEVICE Wetterstation1 FOR Hwr
POST localhost:8080/groups/HWR/devices
Content-Type: application/json

{
  "name": "Wetterstation1",
  "description": "",
  "type": "weather_station"
}

### GET ALL DEVICES GOR GROUP HWR
GET localhost:8080/groups/HWR/devices/Wetterstation1

### CREATE A NEW METRIC FOR Wetterstation1 in GROUP HWR
POST localhost:8080/groups/HWR/devices/Wetterstation1/metrics
Content-Type: application/json

{
  "unit": "Â°C",
  "value": -3.0,
  "timestamp": "2022-12-30T10:00:00+01:00"
}

### GET ALL METRIC FOR Wetterstation1 in GROUP HWR
GET localhost:8080/groups/HWR/devices/Wetterstation1/metrics?from=now-20m&to=now-3m

#### UPDATE A GROUP
#PUT localhost:8080/groups/HWR
#Content-Type: application/json
#
#{
#  "name": "hwr",
#  "description": "Neuer Raum. Mit Waschmaschine"
#}
#
### DELETE A GROUP
#DELETE localhost:8080/groups/hwr

GET http://nas.schmidt:27017/app/unifi

###
POST https://nas.schmidt:8086/api/v2/query?org=fam-schmidt
Authorization: Token VPTF5E_wV6kgjT7O1m0roFMtPMAxMA7wNSYZwhWOLvX9Hv4Sv4fiUEHPfMlPP-FK3GzAU4iO73BRoR5gWs_Ytg==
Content-Type: application/vnd.flux

from(bucket: "haus")
  |> range(start: -3d)
  |> filter(fn: (r) => r["_measurement"] == "weather")
  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> keep(columns: ["_time", "model", "dewPoint", "heatIndex", "temperature"])
  |> group(columns: ["model"])
  |> aggregateWindow(column: "temperature", every: 30s, fn: last)
  |> filter(fn: (r) => exists r.temperature)


###
#DELETE localhost:8080/groups/hwr
#   |> aggregateWindow(column: "temperature", every: 30s, fn: last)
#from(bucket: "haus")
#  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
#  |> filter(fn: (r) => r["_measurement"] == "weather")
#  |> pivot(rowKey: ["_time"], columnKey: ["_field"], valueColumn: "_value")
#  |> filter(fn: (r) => r["model"] == "Acurite-606TX")
#  |> keep(columns: ["_time", "temperature"])
#  |> aggregateWindow(column: "temperature", every: v.windowPeriod, fn: last)
#  |> rename(columns: {temperature: "aussen_temp"})
GET http://nas.schmidt:8086/api/v2/config
Authorization: Token 8B91D6nLtC_P6EMmpgFOT0obLS0zYhuBiT0Rn0TafNgL1WGGgDU8LnoIGZl8ad5BDPY8tC9gM0uj28ZpASlqbA==

###
POST http://nas.schmidt:8086/api/v2/signin
Authorization: